generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model events {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @db.VarChar(255)
  date        DateTime     @db.Date
  description String?
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  images      images[]
  user_roles  user_roles[]
}

model face_embeddings {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_id  String                @db.Uuid
  embedding Unsupported("vector")
  images    images                @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model images {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  image_data      Bytes
  event_id        String            @db.Uuid
  created_by      String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  face_embeddings face_embeddings[]
  users           users             @relation(fields: [created_by], references: [clerk_id], onDelete: NoAction, onUpdate: NoAction)
  events          events            @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_roles {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.VarChar(100)
  event_id   String    @db.Uuid
  role       String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  events     events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [clerk_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  email      String       @unique @db.VarChar(100)
  clerk_id   String       @unique @db.VarChar(100)
  images     images[]
  user_roles user_roles[]
}
